generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id Int @id @default(autoincrement())
  email String @unique
  password String
  isAdmin Boolean @default(false)
  books Book[]
  bookMark Bookmark[]
  registrationDate DateTime @default(now())
}

model InputParams {
  id Int @id @default(autoincrement())
  age Int
  bookId Int
  book Book @relation(fields: [bookId], references: [id], onDelete: Cascade)
  prompt String
  genre String
  artstyle String
  language String
}

model Book {
  id Int @id @default(autoincrement())
  title String
  userEmail String
  user User @relation(fields: [userEmail], references: [email],  onDelete: Cascade)
  flagged Flagged? // for flagging
  bookMark Bookmark? // for book marking 
  inputParams InputParams[] 
  paragraphs Paragraph[]
  createdAt DateTime @default(now())
}

model Paragraph {
  id Int @id @default(autoincrement())
  bookId Int
  book Book @relation(fields: [bookId], references: [id], onDelete: Cascade)
  paragraph String
  image Image?
  paragraphNumber Int
}

model Image{
  id Int @id @default(autoincrement())
  paragraphID Int @unique
  paragraph Paragraph @relation(fields: [paragraphID], references: [id],  onDelete: Cascade)
  image String
}

model Bookmark {
  id Int @id @default(autoincrement())
  bookId Int @unique
  book Book @relation(fields: [bookId], references: [id], onDelete: Cascade)
  userEmail String
  user User @relation(fields: [userEmail], references: [email],  onDelete: Cascade)
  date DateTime @default(now())
}


model Flagged {
  id Int @id @default(autoincrement())
  bookId Int @unique
  book Book @relation(fields: [bookId], references: [id], onDelete: Cascade)
  flaggedAt DateTime @default(now())
}